<?xml version="1.0" encoding="utf-8"?>

<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info"
      internalLogFile="c:\temp\internal-nlog-AspNetCore.txt">

	<variable name="logDirectory" value="${basedir}/logs/${shortdate}" />

	<!-- enable asp.net core layout renderers -->
	<extensions>
		<add assembly="NLog.Web.AspNetCore" />
		<!--<add assembly="NLog.MailKit"/>-->
		<!--<add assembly="Npgsql.EntityFrameworkCore.PostgreSQL"/>-->
		<!--<add assembly="Microsoft.EntityFrameworkCore.Sqlite.Core"/>-->
	</extensions>

	<!-- the targets to write to -->
	<targets>
		<!-- write logs to file -->
		<target xsi:type="File"
		        name="target1"
		        fileName="${basedir}/Logs/LogFile_${date:format=yyyyMMdd}.txt"
		        layout="${date}|${level:uppercase=true}|${message} ${exception:format=type,message,method,stackTrace:maxInnerExceptionLevel=10:innerFormat=shortType,message,method}|${logger}|${all-event-properties}" />

		<target xsi:type="File"
		        name="target2"
		        fileName="${basedir}/Logs/LogFile_errors_${date:format=yyyyMMdd}.txt"
		        layout="${date}|${level:uppercase=true}|${message} ${exception:format=type,message,method,stackTrace:maxInnerExceptionLevel=10:innerFormat=shortType,message,method}|${logger}|${all-event-properties}" />


		<!--Запись в PostgreSQL-->
		<!--<target xsi:type="Database" name="postgresql"
				dbProvider="Npgsql.NpgsqlConnection, Npgsql">
			<connectionString>
				Server=127.0.0.1;Port=5432;Database=logs;User Id=test;Password=test;
			</connectionString>
			<commandText>
				insert into "logs".logging(log_date,log_level,log_logger,log_message, stacktrace) values(@time_stamp, @level, @logger, @message, @stacktrace);
			</commandText>
			<parameter name="@time_stamp" layout="${longdate}"/>
			<parameter name="@level" layout="${level}"/>
			<parameter name="@logger" layout="${logger}"/>
			<parameter name="@message" layout="${message}"/>
			<parameter name="@stacktrace" layout="${stacktrace}"/>
		</target>-->

		<!--Запись в SQLite-->
		<!--<target xsi:type="Database" name="sqlite"
				dbProvider="Microsoft.Data.Sqlite.SqliteConnection, Microsoft.Data.Sqlite">
			<connectionString>
				Data Source=${basedir}\logs.db
			</connectionString>
			<commandText>
				insert into logging(log_date,log_level,log_logger,log_message,stacktrace) values(@time_stamp, @level, @logger, @message, @stacktrace);
			</commandText>
			<parameter name="@time_stamp" layout="${longdate}"/>
			<parameter name="@level" layout="${level}"/>
			<parameter name="@logger" layout="${logger}"/>
			<parameter name="@message" layout="${message}"/>
			<parameter name="@stacktrace" layout="${stacktrace}"/>
		</target>-->

		<!--Запись в SQLServer-->
		<!--<target xsi:type="Database" name="sqlserver"
		        dbProvider="Microsoft.Data.SqlClient.SqlConnection, Microsoft.Data.SqlClient">
			<connectionString>
				Data Source=localhost\sqlexpress;Initial Catalog=база;User ID=пользователь;Password=пароль;
			</connectionString>
			<commandText>
				insert into "authors".logging(log_date,log_level,log_logger,log_message, stacktrace) values(@time_stamp, @level, @logger, @message, @stacktrace);
			</commandText>
			<parameter name="@time_stamp" layout="${longdate}" />
			<parameter name="@level" layout="${level}" />
			<parameter name="@logger" layout="${logger}" />
			<parameter name="@message" layout="${message}" />
			<parameter name="@stacktrace" layout="${stacktrace}" />
		</target>-->

		<!--Отправка по почте-->
		<!--<target xsi:type="Mail" name="mail"
            smtpServer="xxxxxxxxxxx"
            smtpPort="xxx"
            smtpAuthentication="Basic"
            smtpUserName="xxxxxxxx"
            smtpPassword="xxxxxxxxxx"
            secureSocketOption="StartTls"
            from="logger@xxxx.xxx" to="xxxx@xxxx.xxx" />-->

		<!--Запись в файл-->
		<!--<target xsi:type="File" name="allfile"
		        fileName="${logDirectory}/nlog-all-${shortdate}.log" deleteOldFileOnStartup="true" concurrentWrites="true" />-->

		<!--Запись в порт-->
		<!--<target xsi:type="NLogViewer" name="TcpOutlet" address="tcp4://localhost:4505" />-->

	</targets>

	<!-- rules to map from logger name to target -->
	<rules>
		<logger name="*" minlevel="Trace" writeTo="target1" />
		<logger name="*" minlevel="Error" writeTo="target2" />

		<!--Можно разделять по файлам-->
		<!--<logger name="*" level="Trace" writeTo="fileLogTrace" />
		<logger name="*" level="Debug" writeTo="fileLogDebug" />
		<logger name="*" level="Info" writeTo="fileLogInfo" />
		<logger name="*" level="Warn" writeTo="fileLogWarn" />
		<logger name="*" level="Error" writeTo="fileLogErrors" />
		<logger name="*" level="Fatal" writeTo="fileLogFatal" />-->

		<!--На почту-->
		<!--<logger name="*" level="Error" writeTo="mail" />-->

		<!--В один файл-->
		<!--<logger name="*" minlevel="Trace" writeTo="allfile" />-->

		<!--В один PostgreSQL-->
		<!--<logger name="*" minlevel="Trace" writeTo="postgresql" />-->

		<!--В SQLite-->
		<!--<logger name="*" minlevel="Trace" writeTo="sqlite" />-->

		<!--В Порт-->
		<!--<logger name="*" minlevel="Trace" writeTo="TcpOutlet">
			<filters>
				<when condition="contains(logger, 'что-то')" action="Log" />
				<when condition="contains(logger, 'что-то')" action="Ignore" />
			</filters>
		</logger>-->
	</rules>
</nlog>