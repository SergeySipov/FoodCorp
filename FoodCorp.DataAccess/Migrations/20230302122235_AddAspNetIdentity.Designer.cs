// <auto-generated />
using System;
using FoodCorp.DataAccess.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodCorp.DataAccess.Migrations
{
    [DbContext(typeof(FoodCorpDbContext))]
    [Migration("20230302122235_AddAspNetIdentity")]
    partial class AddAspNetIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("Id");

                    b.ToTable("Category", "ref");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sushi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "FastFood"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Shawarma"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Healthy"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Breakfasts"
                        });
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Customer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasPrecision(2)
                        .HasColumnType("Float");

                    b.HasKey("UserId");

                    b.ToTable("Customer", "usr");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.CustomerProduct", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomerProduct", "prod");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMethod", "ref");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Classic Delivery"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Self Delivery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Door Delivery"
                        });
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SmallDateTime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDateTimeUtc")
                        .HasColumnType("SmallDateTime");

                    b.Property<decimal>("PreferredPrice")
                        .HasPrecision(9)
                        .HasColumnType("Decimal");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("OrderStatusId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Status");

                    b.ToTable("Order", "ord");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.OrderDeliveryAndPaymentType", b =>
                {
                    b.Property<int>("OrderOfferId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryMethodId");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodId");

                    b.HasKey("OrderOfferId");

                    b.HasIndex("DeliveryMethod");

                    b.HasIndex("PaymentMethod");

                    b.ToTable("OrderDeliveryAndPaymentType", "ord");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.OrderFeedback", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<double>("Rating")
                        .HasPrecision(2)
                        .HasColumnType("Float");

                    b.HasKey("OrderId");

                    b.ToTable("OrderFeedback", "ord");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.OrderOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SmallDateTime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PerformerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(9)
                        .HasColumnType("Decimal");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PerformerId");

                    b.ToTable("OrderOffer", "ord");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.OrderOfferChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SmallDateTime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("OrderOfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderOfferId");

                    b.ToTable("OrderOfferChatMessage", "ord");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus", "ref");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Performer Found"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Performer Selected"
                        },
                        new
                        {
                            Id = 3,
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ready For Delivery"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod", "ref");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Credit Card"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Crypto Currency"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Electronic Wallet"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Debit Card"
                        });
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Performer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CountOfCompletedOrders")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasPrecision(2)
                        .HasColumnType("Float");

                    b.HasKey("UserId");

                    b.ToTable("Performer", "usr");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.PerformerProduct", b =>
                {
                    b.Property<int>("PerformerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("PerformerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("PerformerProduct", "prod");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("Price")
                        .HasPrecision(9)
                        .HasColumnType("Decimal");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.ToTable("Product", "prod");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage", "prod");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("Id");

                    b.ToTable("Role", "ref");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Legal Entity"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Natural Person"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Individual Enterpreneur"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImagePath")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("RegistrationDateTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SmallDateTime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("RoleId");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("Role");

                    b.ToTable("User", "usr");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.UserShowcaseImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserShowcaseImage", "usr");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Customer", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("FoodCorp.DataAccess.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.CustomerProduct", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCorp.DataAccess.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Order", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCorp.DataAccess.Entities.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCorp.DataAccess.Entities.OrderStatus", null)
                        .WithMany("Orders")
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.OrderDeliveryAndPaymentType", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.DeliveryMethod", null)
                        .WithMany("DeliveryAndPaymentTypes")
                        .HasForeignKey("DeliveryMethod")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FoodCorp.DataAccess.Entities.OrderOffer", "OrderOffer")
                        .WithOne("DeliveryAndPaymentType")
                        .HasForeignKey("FoodCorp.DataAccess.Entities.OrderDeliveryAndPaymentType", "OrderOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCorp.DataAccess.Entities.PaymentMethod", null)
                        .WithMany("DeliveryAndPaymentTypes")
                        .HasForeignKey("PaymentMethod")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OrderOffer");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.OrderFeedback", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.Order", "Order")
                        .WithOne("OrderFeedback")
                        .HasForeignKey("FoodCorp.DataAccess.Entities.OrderFeedback", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.OrderOffer", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.Order", "Order")
                        .WithMany("Offers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCorp.DataAccess.Entities.Performer", "Performer")
                        .WithMany("Offers")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Performer");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.OrderOfferChatMessage", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.OrderOffer", "OrderOffer")
                        .WithMany("ChatMessages")
                        .HasForeignKey("OrderOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderOffer");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Performer", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.User", "User")
                        .WithOne("Performer")
                        .HasForeignKey("FoodCorp.DataAccess.Entities.Performer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.PerformerProduct", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.Performer", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCorp.DataAccess.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Product", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("Category")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.ProductImage", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.User", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("Role")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.UserShowcaseImage", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.User", "User")
                        .WithMany("ShowcaseImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FoodCorp.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.DeliveryMethod", b =>
                {
                    b.Navigation("DeliveryAndPaymentTypes");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Order", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("OrderFeedback");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.OrderOffer", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("DeliveryAndPaymentType");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.PaymentMethod", b =>
                {
                    b.Navigation("DeliveryAndPaymentTypes");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Performer", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FoodCorp.DataAccess.Entities.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Performer");

                    b.Navigation("ShowcaseImages");
                });
#pragma warning restore 612, 618
        }
    }
}
